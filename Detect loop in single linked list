class ListNode:
    def __init__(self, value):
        self.value = value
        self.next = None

def detect_loop(head):
    slow = fast = head

    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        
        if slow == fast:  # Loop detected
            return True

    return False  # No loop

# Helper function to create a linked list and form a loop based on pos
def create_linked_list_with_loop(values, pos):
    if not values:
        return None

    nodes = [ListNode(val) for val in values]
    
    for i in range(len(values) - 1):
        nodes[i].next = nodes[i + 1]

    if pos > 0:  # Creating loop if pos is not 0
        nodes[-1].next = nodes[pos - 1]

    return nodes[0]  # Returning head of the linked list

# Example test cases
head1 = create_linked_list_with_loop([1, 3, 4], 2)
print(detect_loop(head1))  # Output: True

head2 = create_linked_list_with_loop([1, 8, 3, 4], 0)
print(detect_loop(head2))  # Output: False

head3 = create_linked_list_with_loop([1, 2, 3, 4], 1)
print(detect_loop(head3))  # Output: True
