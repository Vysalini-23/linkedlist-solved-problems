class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class Solution:
    def reverseKGroup(self, head, k):
        if not head or k == 1:
            return head
        
        dummy = Node(0)
        dummy.next = head
        prev = dummy
        cur = head
        
        # Count the number of nodes in the list
        count = 0
        while cur:
            count += 1
            cur = cur.next
        
        # Reverse in groups of k
        while count >= k:
            cur = prev.next  # First node of the group
            nxt = cur.next   # Second node of the group
            
            # Reverse k nodes
            for i in range(k - 1):
                cur.next = nxt.next
                nxt.next = prev.next
                prev.next = nxt
                nxt = cur.next
            
            prev = cur  # Move prev to the end of the reversed group
            count -= k  # Reduce count by k
        
        return dummy.next

# Helper function to print linked list
def printList(head):
    while head:
        print(head.data, end=" -> ")
        head = head.next
    print("None")

# Helper function to create linked list from a list
def createLinkedList(arr):
    if not arr:
        return None
    head = Node(arr[0])
    temp = head
    for val in arr[1:]:
        temp.next = Node(val)
        temp = temp.next
    return head

# Example usage
arr = [1, 2, 3, 4, 5]
k = 2
head = createLinkedList(arr)
print("Original Linked List:")
printList(head)

solution = Solution()
newHead = solution.reverseKGroup(head, k)

print("Reversed Linked List in Groups of", k, ":")
printList(newHead)
