class ListNode:
    def __init__(self, val=0):
        self.val = val
        self.next = None

def detect_and_remove_loop(head):
    slow = fast = head
    
    # Detect Loop using Floyd's Cycle Detection Algorithm
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            break
    else:
        return True  # No loop detected
    
    # Find the start of the loop
    slow = head
    if fast == head:  # If loop starts at head
        while fast.next != head:
            fast = fast.next
    else:
        while slow.next != fast.next:
            slow = slow.next
            fast = fast.next
    
    # Remove the loop
    fast.next = None
    return True

# Helper function to create a linked list with a loop
def create_linked_list_with_loop(values, pos):
    if not values:
        return None
    nodes = [ListNode(val) for val in values]
    for i in range(len(nodes) - 1):
        nodes[i].next = nodes[i + 1]
    if pos > 0:
        nodes[-1].next = nodes[pos - 1]  # Creating loop
    return nodes[0]

# Test cases
test_cases = [
    ([1, 3, 4], 2),
    ([1, 8, 3, 4], 0),
    ([1, 2, 3, 4], 1)
]

for values, pos in test_cases:
    head = create_linked_list_with_loop(values, pos)
    print(detect_and_remove_loop(head))
