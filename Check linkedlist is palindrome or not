class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SLL:  # Singly Linked List
    def __init__(self):
        self.head = None

    def isPalindrome(self):
        if not self.head or not self.head.next:
            return True  # A single node or empty list is a palindrome

        # Step 1: Find the middle of the linked list
        slow, fast = self.head, self.head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        # Step 2: Reverse the second half of the list
        prev = None
        while slow:
            temp = slow.next
            slow.next = prev
            prev = slow
            slow = temp

        # Step 3: Compare the first and second halves
        left, right = self.head, prev
        while right:  # Compare till the end of the reversed half
            if left.data != right.data:
                return False
            left = left.next
            right = right.next

        return True

# Creating the linked list and testing
l = SLL()
l.head = Node(1)
n1 = Node(2)
l.head.next = n1
n2 = Node(3)
n1.next = n2
n3 = Node(2)
n2.next = n3
n4 = Node(1)
n3.next = n4
print("The linked list is palindrome:", l.isPalindrome())
