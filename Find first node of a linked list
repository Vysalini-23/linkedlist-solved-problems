class ListNode:
    def __init__(self, val=0):
        self.val = val
        self.next = None

def detect_loop_start(head):
    slow = fast = head

    # Detect Loop using Floyd's Cycle Detection Algorithm
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next
        if slow == fast:
            return find_loop_start(head, slow)  # Find and return loop start node
    return -1  # No loop detected

def find_loop_start(head, meeting_point):
    slow = head
    while slow != meeting_point:
        slow = slow.next
        meeting_point = meeting_point.next
    return slow.val  # Returning the first node of the loop

# Helper function to create a linked list with a loop
def create_linked_list_with_loop(values, pos):
    if not values:
        return None
    nodes = [ListNode(val) for val in values]
    for i in range(len(nodes) - 1):
        nodes[i].next = nodes[i + 1]
    if pos > 0:
        nodes[-1].next = nodes[pos - 1]  # Creating loop
    return nodes[0]

# Test cases
test_cases = [
    ([1, 3, 4], 2),  # Loop at node with value 3
    ([1, 8, 3, 4], 0),  # No loop
    ([1, 2, 3, 4], 1)   # Loop at node with value 1
]

for values, pos in test_cases:
    head = create_linked_list_with_loop(values, pos)
    print(detect_loop_start(head))  # Should print the first node of the loop or -1 if no loop
